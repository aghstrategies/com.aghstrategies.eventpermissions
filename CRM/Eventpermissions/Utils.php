<?php

/**
 * Miscellaneous utilities.
 */
class CRM_Eventpermissions_Utils {
  /**
   * The participant_role_id values with the permission to edit an event.
   *
   * @type array
   */
  private $hostId = array();

  private static $dashletId = NULL;

  public function getHostId() {
    if (empty($this->hostId)) {
      try {
        $result = civicrm_api3('Setting', 'getvalue', array(
          'name' => 'eventpermissions_roles',
          'group' => 'Event Permissions Preferences',
        ));
        if (!empty($result)) {
          $this->hostId = $result;
        }
      }
      catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
        CRM_Core_Error::debug_log_message(ts('API Error finding ID of permissioned participant role(s): %1', array(
          'domain' => 'com.aghstrategies.eventpermissions',
          1 => $error,
        )));
      }
    }
    return $this->hostId;
  }

  /**
   * Set the participant role(s) with the permission to edit events.
   */
  public function setHostId($ids) {
    if (empty($ids)) {
      $ids = array();
    }
    elseif (!is_array($ids)) {
      $ids = array(intval($ids));
    }
    try {
      $result = civicrm_api3('Setting', 'create', array('eventpermissions_roles' => $ids));
      $this->hostId = $ids;
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
      CRM_Core_Error::debug_log_message(ts('API Error setting permissioned participant roles: %1', array(
        'domain' => 'com.aghstrategies.eventpermissions',
        1 => $error,
      )));
    }
  }

  /**
   * Find the ID number of the dashlet generated by this extension.
   *
   * @return int
   *   The dashlet ID.
   */
  public static function getDashletId() {
    if (empty(self::$dashletId)) {
      try {
        $result = civicrm_api3('Dashboard', 'getsingle', array(
          'name' => "eventpermissions_myevents",
          'options' => array('limit' => 1),
          'return' => 'id',
        ));
        if (!empty($result['id'])) {
          self::$dashletId = $result['id'];
        }
      }
      catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
        CRM_Core_Error::debug_log_message(ts('API Error finding ID of "My Events dashlet": %1', array(
          'domain' => 'com.aghstrategies.eventpermissions',
          1 => $error,
        )));
      }
    }
    return self::$dashletId;
  }

  /**
   * See if the current user can edit an event.
   *
   * @param int $eventId
   *   The event ID.
   *
   * @return bool
   *   Whether permission is granted.
   */
  public static function checkPerms($eventId) {
    // Admins or users with "edit all events" can edit all events.
    if (CRM_Core_Permission::check('edit all events') || CRM_Core_Permission::check('administer CiviCRM')) {
      return TRUE;
    }

    if (!$eventId) {
      return NULL;
    }
    return self::isMyEvent($eventId);
  }

  /**
   * Checks to see if user created or is host of event
   *
   * @param  int $eventId
   *   Id of event for which we are checking permissions
   *
   * @return bool
   *   user created or is a host
   */
  public static function isMyEvent($eventId) {
    $contactId = CRM_Core_Session::singleton()->get('userID');

    // Creators of events can edit their events.
    try {
      $result = civicrm_api3('Event', 'getcount', array(
        'id' => $eventId,
        'created_id' => $contactId,
      ));
      if (!empty($result)) {
        return TRUE;
      }
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
      CRM_Core_Error::debug_log_message(ts('API Error finding event owner: %1', array(
        'domain' => 'com.aghstrategies.eventpermissions',
        1 => $error,
      )));
    }

    // Hosts of events can edit their events.
    try {
      // TODO: fix role_id depending upon site-specific naming.
      $result = civicrm_api3('Participant', 'getcount', array(
        'contact_id' => $contactId,
        'event_id' => $eventId,
        'role_id' => "Host",
      ));
      if (!empty($result)) {
        return TRUE;
      }
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
      CRM_Core_Error::debug_log_message(ts('API Error finding event owner: %1', array(
        'domain' => 'com.aghstrategies.eventpermissions',
        1 => $error,
      )));
    }
    return FALSE;
  }

  public function myUpcomingEvents() {
    $contactId = CRM_Core_Session::singleton()->get('userID');
    $curDate = date('YmdHis');
    $hostID = $this->getHostId();
    if (empty($hostID)) {
      $join = '';
      $andWhere = '';
    }
    else {
      $hostID = implode(', ', $hostID);
      $join = "
      LEFT JOIN civicrm_participant p
        ON p.event_id = e.id
        AND p.role_id IN ({$hostID})
        AND p.contact_id = {$contactId}";
      $andWhere = ' OR p.id IS NOT NULL';
    }
    $query = "SELECT e.id, e.title, e.participant_listing_id
      FROM civicrm_event e
      {$join}
      WHERE (e.end_date >= {$curDate} OR e.end_date IS NULL)
        AND (e.created_id = {$contactId}{$andWhere})";
    $events = CRM_Core_DAO::executeQuery($query);
    $return = array();
    while ($events->fetch()) {
      $return[$events->id] = array(
        'title' => $events->title,
        'participant_listing_id' => $events->participant_listing_id,
      );
    }
    return $return;
  }

}
